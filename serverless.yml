service: serverless-notes-api

# Create an optimized package for our functions 
# package:
#   individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  # - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  lambdaHashingVersion: '20201221'
  
  # To load environment variables
  environment:
    NOTES_TABLE: kelue-notes-table-${self:provider.stage}
    NOTES_BUCKET: kelue-notes-bucket-${self:provider.stage}

functions:
  # hello:
  #   handler: handler.hello
  #   events:
  #     - http:
  #         path: hello
  #         method: get

  createNote:
   # Defines an HTTP API endpoint that calls the main function in createNote.ts
    # - path: url path is /notes
    # - method: POST request
    handler: src/lambda/http/createNote.handler
    events:
      - http:
          path: notes
          cors: true
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  getNote:
   # Defines an HTTP API endpoint that calls the main function in getNote.ts
    # - path: url path is /notes
    # - method: GET request
    handler: src/lambda/http/getNote.handler
    events:
      - http:
          path: notes/{id}
          cors: true
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  listNotes:
    # Defines an HTTP API endpoint that calls the main function in listNotes.ts
    # - path: url path is /notes
    # - method: GET request
    handler: src/lambda/http/listNotes.handler
    events:
      - http:
          path: notes
          cors: true
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  updateNote:
    # Defines an HTTP API endpoint that calls the main function in updateNote.ts
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: src/lambda/http/updateNote.handler
    events:
      - http:
          path: notes/{id}
          cors: true
          method: put
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  deleteNote:
    # Defines an HTTP API endpoint that calls the main function in deleteNote.ts
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: src/lambda/http/deleteNote.handler
    events:
      - http:
          path: notes/{id}
          cors: true
          method: delete
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}


resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        # Set the capacity to auto-scale
        BillingMode: PAY_PER_REQUEST
          # GlobalSecondaryIndexes:
          #   - IndexName: ${self:provider.environment.TODO_USER_INDEX}
          #     KeySchema:
          #       - AttributeName: userId
          #         KeyType: HASH
          #     Projection:
          #       ProjectionType: ALL

    NotesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.NOTES_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: "arn:aws:s3:::${self:provider.environment.NOTES_BUCKET}/*"
        Bucket: !Ref NotesBucket
