service: serverless-notes-api

# Create an optimized package for our functions 
# package:
#   individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  # - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  lambdaHashingVersion: '20201221'
  
  # To load environment variables
  environment:
    NOTES_TABLE: kelue-notes-table-${self:provider.stage}
    NOTES_BUCKET: kelue-notes-bucket-${self:provider.stage}

functions:
  # hello:
  #   handler: handler.hello
  #   events:
  #     - http:
  #         path: hello
  #         method: get

  createNote:
   # Defines an HTTP API endpoint that calls the main function in createNote.ts
    # - path: url path is /notes
    # - method: POST request
    handler: src/lambda/http/createNote.handler
    events:
      - http:
          path: notes
          cors: true
          method: post
          authorizer: aws_iam
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  getNote:
   # Defines an HTTP API endpoint that calls the main function in getNote.ts
    # - path: url path is /notes
    # - method: GET request
    handler: src/lambda/http/getNote.handler
    events:
      - http:
          path: notes/{id}
          cors: true
          method: get
          authorizer: aws_iam
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  listNotes:
    # Defines an HTTP API endpoint that calls the main function in listNotes.ts
    # - path: url path is /notes
    # - method: GET request
    handler: src/lambda/http/listNotes.handler
    events:
      - http:
          path: notes
          cors: true
          method: get
          authorizer: aws_iam
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  updateNote:
    # Defines an HTTP API endpoint that calls the main function in updateNote.ts
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: src/lambda/http/updateNote.handler
    events:
      - http:
          path: notes/{id}
          cors: true
          method: put
          authorizer: aws_iam
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  deleteNote:
    # Defines an HTTP API endpoint that calls the main function in deleteNote.ts
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: src/lambda/http/deleteNote.handler
    events:
      - http:
          path: notes/{id}
          cors: true
          method: delete
          authorizer: aws_iam
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}


resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
  
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        # Set the capacity to auto-scale
        BillingMode: PAY_PER_REQUEST
          # GlobalSecondaryIndexes:
          #   - IndexName: ${self:provider.environment.TODO_USER_INDEX}
          #     KeySchema:
          #       - AttributeName: userId
          #         KeyType: HASH
          #     Projection:
          #       ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
            
    # Outputs:
    #   AttachmentsBucketName:
    #     Value:
    #       Ref: AttachmentsBucket

  
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:provider.stage}-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

  # Print out the Id of the User Pool that is created
    # Outputs:
    #   UserPoolId:
    #     Value:
    #       Ref: CognitoUserPool

    #   UserPoolClientId:
    #     Value:
    #       Ref: CognitoUserPoolClient


  # The federated identity for our user pool to auth with
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        # Generate a name based on the stage
        IdentityPoolName: ${self:provider.stage}IdentityPool
        # Don't allow unathenticated users
        AllowUnauthenticatedIdentities: false
        # Link to our User Pool
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [ "CognitoUserPool", "ProviderName" ]
              
    # IAM roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
            
    # IAM role used for authenticated users
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'
                
                # Allow users to invoke our API
                - Effect: 'Allow'
                  Action:
                    - 'execute-api:Invoke'
                  Resource:
                    Fn::Join:
                      - ''
                      -
                        - 'arn:aws:execute-api:'
                        - Ref: AWS::Region
                        - ':'
                        - Ref: AWS::AccountId
                        - ':'
                        - Ref: ApiGatewayRestApi
                        - '/*'
                
                # Allow users to upload attachments to their
                # folder inside our S3 bucket
                - Effect: 'Allow'
                  Action:
                    - 's3:*'
                  Resource:
                    - Fn::Join:
                      - ''
                      -
                        - Fn::GetAtt: [AttachmentsBucket, Arn]
                        - '/private/'
                        - '$'
                        - '{cognito-identity.amazonaws.com:sub}/*'
  
    # Print out the Id of the Identity Pool that is created
      # Outputs:
      #   IdentityPoolId:
      #     Value:
      #       Ref: CognitoIdentityPool
